#pragma include "simpleObjects.incl"
#pragma include "Mandelbulb.incl"
#pragma include "CombineSDF.incl"

uniform int objectSize;
uniform int objectAmount;
uniform float[] objectData;
uniform int transformAmount;
uniform float[] transformData;
uniform int effectSize;
uniform int effectAmount;
uniform float[] effectData;

vec3 repLim(vec3 position, float c, vec3 amount);

vec4 DistanceEstimator(vec3 position) {
    float tim = time;
    vec3 spherePos = vec3(2,0,0);
    float sphereRadius = 1;
    vec3 sphereCol = vec3(1,0,0);
    vec3 boxPos = vec3(-1,-2,3);
    vec3 boxSize = vec3(1);
    vec3 boxCol = vec3(0,1,0);
    vec3 mandelbulbPos = vec3(0,0,0);
    vec3 mandelDist = mandelbulbPos - position;
    return //vec4(vec3(1), Mandelbulb(mandelDist));
    vec4(vec3(1), Sphere(mod(mandelDist+2,4)-2,1));
    //vec4(vec3(1),Sphere(repLim(mandelDist,vec3(sin(tim*1.3215)+5,3,3),vec3(2,2,2)),1))//,vec4(vec3(1),-Box(-position,vec3(100))))
    //vec4(vec3(1),min(Sphere(repLim(mandelDist,sin(tim*1.3215)+5,vec3(sin(tim * 1.1532)*2+2.3,sin(tim *1.432561)*1.5 + 1.8, sin(tim * 1.92315)*1.7 +2)),1),-Box(-position,vec3(100))));
    /*min(
        min(
            max(
                Sphere(spherePos - position,sphereRadius),
                -Box(spherePos-position+vec3(-1,0,0),vec3(0.5))
            ),
            Box(boxPos-position,boxSize)
        ),
        differenceSDF(
        vec4(vec3(1),abs(Box((spherePos-position),boxSize))-.1),
        vec4(vec3(1),Sphere((spherePos-position)/2.5,2.5)*2.5)
        )
    )*/
    
       //vec4(vec3(1), Mandelbulb(
         //   mod(mandelDist+2,4)-2 //infinite Mandelbulbs
            //normalize(mandelDist) * (mod(length(mandelDist)+20,40)-20)
            //mandelDist
        //))
    //vec4(vec3(1,0,0),Box(vec3(0)-position,boxSize) );
}
vec3 GetSurfaceNormal(vec3 position)
{
    float d0 = DistanceEstimator(position).w;
    const vec2 epsilon = vec2(.001,0);
    vec3 d1 = vec3(
        DistanceEstimator(position-epsilon.xyy).w,
        DistanceEstimator(position-epsilon.yxy).w,
        DistanceEstimator(position-epsilon.yyx).w);
    return normalize(d0 - d1);
}
vec3 repLim(vec3 position, float c, vec3 amount)
{
    return position - c* clamp(round(position/c),-amount,amount);
}
