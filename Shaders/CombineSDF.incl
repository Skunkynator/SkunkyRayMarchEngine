
vec4 intersectSDF(vec4 a, vec4 b) {
    float d = max(a.w, b.w);
    return d == a.w? a : b;
}
  
vec4 unionSDF(vec4 a, vec4 b) {
    float d = min(a.w, b.w);
    return d == a.w? a : b;
}
 
vec4 differenceSDF(vec4 a, vec4 b) {
    float d = max(a.w, -b.w);
    return d == a.w ? a : vec4(b.rgb,-b.w);
}


vec4 smoothIntersectSDF(vec4 a, vec4 b, float k ) 
{
  float h = clamp(0.5 - 0.5*(a.w-b.w)/k, 0., 1.);
  vec3 c = mix(a.rgb,b.rgb,h);
  float d = mix(a.w,b.w,h) + k*h*(1.-h);
   
  return vec4(c,d);
}
 
vec4 smoothUnionSDF(vec4 a, vec4 b, float k ) 
{
  float h = clamp(0.5 + 0.5*(a.w-b.w)/k, 0., 1.);
  vec3 c = mix(a.rgb,b.rgb,h);
  float d = mix(a.w, b.w, h) - k*h*(1.-h); 
   
  return vec4(c,d);
}
 
vec4 smoothDifferenceSDF(vec4 a, vec4 b, float k) 
{
  float h = clamp(0.5 - 0.5*(a.w+b.w)/k, 0., 1.);
  vec3 c = mix(a.rgb,b.rgb,h);
  float d = mix(a.w, -b.w, h ) + k*h*(1.-h);
   
  return vec4(c,d);
}
